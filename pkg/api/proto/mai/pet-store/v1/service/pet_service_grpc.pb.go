// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/proto/mai/pet-store/v1/service/pet_service.proto

package service

import (
	context "context"
	contracts "github.com/DeoEsor/MAI-course-backend-go/pkg/api/proto/mai/pet-store/v1/service/contracts"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PetApi_Create_FullMethodName = "/mai.backend.go.pet_store.v1.PetApi/Create"
	PetApi_Get_FullMethodName    = "/mai.backend.go.pet_store.v1.PetApi/Get"
	PetApi_Update_FullMethodName = "/mai.backend.go.pet_store.v1.PetApi/Update"
	PetApi_Search_FullMethodName = "/mai.backend.go.pet_store.v1.PetApi/Search"
)

// PetApiClient is the client API for PetApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetApiClient interface {
	Create(ctx context.Context, in *contracts.CreatePetRequest, opts ...grpc.CallOption) (*contracts.CreatePetResponse, error)
	Get(ctx context.Context, in *contracts.GetPetRequest, opts ...grpc.CallOption) (*contracts.GetPetResponse, error)
	Update(ctx context.Context, in *contracts.UpdatePetRequest, opts ...grpc.CallOption) (*contracts.UpdatePetResponse, error)
	Search(ctx context.Context, in *contracts.SearchPetRequest, opts ...grpc.CallOption) (*contracts.SearchPetResponse, error)
}

type petApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPetApiClient(cc grpc.ClientConnInterface) PetApiClient {
	return &petApiClient{cc}
}

func (c *petApiClient) Create(ctx context.Context, in *contracts.CreatePetRequest, opts ...grpc.CallOption) (*contracts.CreatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(contracts.CreatePetResponse)
	err := c.cc.Invoke(ctx, PetApi_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petApiClient) Get(ctx context.Context, in *contracts.GetPetRequest, opts ...grpc.CallOption) (*contracts.GetPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(contracts.GetPetResponse)
	err := c.cc.Invoke(ctx, PetApi_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petApiClient) Update(ctx context.Context, in *contracts.UpdatePetRequest, opts ...grpc.CallOption) (*contracts.UpdatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(contracts.UpdatePetResponse)
	err := c.cc.Invoke(ctx, PetApi_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petApiClient) Search(ctx context.Context, in *contracts.SearchPetRequest, opts ...grpc.CallOption) (*contracts.SearchPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(contracts.SearchPetResponse)
	err := c.cc.Invoke(ctx, PetApi_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetApiServer is the server API for PetApi service.
// All implementations should embed UnimplementedPetApiServer
// for forward compatibility.
type PetApiServer interface {
	Create(context.Context, *contracts.CreatePetRequest) (*contracts.CreatePetResponse, error)
	Get(context.Context, *contracts.GetPetRequest) (*contracts.GetPetResponse, error)
	Update(context.Context, *contracts.UpdatePetRequest) (*contracts.UpdatePetResponse, error)
	Search(context.Context, *contracts.SearchPetRequest) (*contracts.SearchPetResponse, error)
}

// UnimplementedPetApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetApiServer struct{}

func (UnimplementedPetApiServer) Create(context.Context, *contracts.CreatePetRequest) (*contracts.CreatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPetApiServer) Get(context.Context, *contracts.GetPetRequest) (*contracts.GetPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPetApiServer) Update(context.Context, *contracts.UpdatePetRequest) (*contracts.UpdatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPetApiServer) Search(context.Context, *contracts.SearchPetRequest) (*contracts.SearchPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedPetApiServer) testEmbeddedByValue() {}

// UnsafePetApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetApiServer will
// result in compilation errors.
type UnsafePetApiServer interface {
	mustEmbedUnimplementedPetApiServer()
}

func RegisterPetApiServer(s grpc.ServiceRegistrar, srv PetApiServer) {
	// If the following call pancis, it indicates UnimplementedPetApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetApi_ServiceDesc, srv)
}

func _PetApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetApi_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetApiServer).Create(ctx, req.(*contracts.CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetApi_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetApiServer).Get(ctx, req.(*contracts.GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetApi_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetApiServer).Update(ctx, req.(*contracts.UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetApi_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.SearchPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetApiServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetApi_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetApiServer).Search(ctx, req.(*contracts.SearchPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetApi_ServiceDesc is the grpc.ServiceDesc for PetApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mai.backend.go.pet_store.v1.PetApi",
	HandlerType: (*PetApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PetApi_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PetApi_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PetApi_Update_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _PetApi_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/mai/pet-store/v1/service/pet_service.proto",
}
