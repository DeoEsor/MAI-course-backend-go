// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: api/proto/mai/pet-store/v1/service/pet_service.proto

package service

import (
	context "context"
	reflect "reflect"

	contracts "github.com/DeoEsor/MAI-course-backend-go/pkg/api/proto/mai/pet-store/v1/service/contracts"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPetApiClient is a mock of PetApiClient interface.
type MockPetApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockPetApiClientMockRecorder
}

// MockPetApiClientMockRecorder is the mock recorder for MockPetApiClient.
type MockPetApiClientMockRecorder struct {
	mock *MockPetApiClient
}

// NewMockPetApiClient creates a new mock instance.
func NewMockPetApiClient(ctrl *gomock.Controller) *MockPetApiClient {
	mock := &MockPetApiClient{ctrl: ctrl}
	mock.recorder = &MockPetApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetApiClient) EXPECT() *MockPetApiClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetApiClient) Create(ctx context.Context, in *contracts.CreatePetRequest, opts ...grpc.CallOption) (*contracts.CreatePetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*contracts.CreatePetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetApiClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetApiClient)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockPetApiClient) Get(ctx context.Context, in *contracts.GetPetRequest, opts ...grpc.CallOption) (*contracts.GetPetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*contracts.GetPetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetApiClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetApiClient)(nil).Get), varargs...)
}

// Search mocks base method.
func (m *MockPetApiClient) Search(ctx context.Context, in *contracts.SearchPetRequest, opts ...grpc.CallOption) (*contracts.SearchPetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*contracts.SearchPetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPetApiClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPetApiClient)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockPetApiClient) Update(ctx context.Context, in *contracts.UpdatePetRequest, opts ...grpc.CallOption) (*contracts.UpdatePetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*contracts.UpdatePetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPetApiClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetApiClient)(nil).Update), varargs...)
}

// MockPetApiServer is a mock of PetApiServer interface.
type MockPetApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockPetApiServerMockRecorder
}

// MockPetApiServerMockRecorder is the mock recorder for MockPetApiServer.
type MockPetApiServerMockRecorder struct {
	mock *MockPetApiServer
}

// NewMockPetApiServer creates a new mock instance.
func NewMockPetApiServer(ctrl *gomock.Controller) *MockPetApiServer {
	mock := &MockPetApiServer{ctrl: ctrl}
	mock.recorder = &MockPetApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetApiServer) EXPECT() *MockPetApiServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetApiServer) Create(ctx context.Context, in *contracts.CreatePetRequest) (*contracts.CreatePetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*contracts.CreatePetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetApiServerMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetApiServer)(nil).Create), ctx, in)
}

// Get mocks base method.
func (m *MockPetApiServer) Get(ctx context.Context, in *contracts.GetPetRequest) (*contracts.GetPetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, in)
	ret0, _ := ret[0].(*contracts.GetPetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetApiServerMockRecorder) Get(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetApiServer)(nil).Get), ctx, in)
}

// Search mocks base method.
func (m *MockPetApiServer) Search(ctx context.Context, in *contracts.SearchPetRequest) (*contracts.SearchPetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, in)
	ret0, _ := ret[0].(*contracts.SearchPetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPetApiServerMockRecorder) Search(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPetApiServer)(nil).Search), ctx, in)
}

// Update mocks base method.
func (m *MockPetApiServer) Update(ctx context.Context, in *contracts.UpdatePetRequest) (*contracts.UpdatePetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*contracts.UpdatePetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPetApiServerMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetApiServer)(nil).Update), ctx, in)
}
